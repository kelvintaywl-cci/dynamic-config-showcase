version: 2.1

parameters:
  repo_a:
    type: boolean
    default: false
  repo_b:
    type: boolean
    default: false
  repo_c:
    type: boolean
    default: false

executors:
  base:
    docker:
      - image: cimg/base:stable
    resource_class: small

commands:
  exit-early-if-irrelevant:
    parameters:
      for:
        type: enum
        enum:
          - repo_a
          - repo_b
          - repo_c
    steps:
      - run:
          name: stop early unless relevant
          command: |
            export RELEVANT=$(eval echo "\$<< parameters.for >>")

            if [[ $CIRCLE_JOB == *"<< parameters.for >>"* ]] && [[ $RELEVANT == "1" ]]; then
              echo "continuing, since job name indicates it is for << parameters.for >>"
            else
              echo "stopping early!"
              circleci-agent step halt
            fi
          environment:
            repo_a: << pipeline.parameters.repo_a >>
            repo_b: << pipeline.parameters.repo_b >>
            repo_c: << pipeline.parameters.repo_c >>

jobs:
  test_repo_a:
    executor: base
    steps:
      # exit early IF pipeline.parameters.repo_a is FALSE
      - unless:
          condition: << pipeline.parameters.repo_a >>
          steps:
            - run: |
                circleci-agent step halt
      - checkout
      - run: echo "TODO test repo_a"
  test:
    parameters:
      for:
        type: enum
        enum:
          - repo_a
          - repo_b
          - repo_c
    executor: base
    steps:
      - exit-early-if-irrelevant:
          for: << parameters.for >>
      - checkout
      - run: "echo TODO test << parameters.for >>"
  deploy:
    parameters:
      for:
        type: enum
        enum:
          - repo_a
          - repo_b
          - repo_c
    executor: base
    steps:
      - exit-early-if-irrelevant:
          for: << parameters.for >>
      - checkout
      - run: "echo DONE deploy << parameters.for >>"

workflows:
  repo_a:
    jobs:
      - test_repo_a

  repo_b:
    jobs:
      - test:
          for: repo_b
          name: test_repo_b
      - deploy:
          for: repo_b
          name: deploy_repo_b
          requires:
            - test_repo_b
  repo_c:
    jobs:
      - test:
          for: repo_c
          name: test_repo_c
      - deploy:
          for: repo_c
          name: deploy_repo_c
          requires:
            - test_repo_c
